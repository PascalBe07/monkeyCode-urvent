{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "Urvent API"
  },
  "schemes": [
    "http"
  ],
  "host": "urvent.ddns.net:3000",
  "basePath": "/api",
  "paths": {
    "/heartbeat": {
      "get": {
        "description": "Test server connection, status and working session configuration. Returns 0 on the first call. Value is then incremented by every call during this session.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Test Integer",
              "description": "Value is incremented by every call during this session. Valid Session-Id in HTTP Header is Required",
              "type": "integer",
              "minimum": 0,
              "maximum": 9
            }
          }
        }
      }
    },
    "/get/events/{time}": {
      "get": {
        "summary": "Get Events for Location",
        "description": "Get Events for secified location. Returns a maximum of 40 events, ordered by distance and relevancy. You need to be logged in with a valid session to perform this operation. Note: Due to Performance and Size optimization only the Cover URL is returned.",
        "parameters": [
          {
            "name": "time",
            "in": "path",
            "type": "string",
            "description": "Time for events (today, week, weekend)",
            "required": true
          },
          {
            "name": "lat",
            "in": "query",
            "type": "number",
            "format": "float",
            "description": "Latitude of location",
            "required": true
          },
          {
            "name": "long",
            "in": "query",
            "type": "number",
            "format": "float",
            "description": "Longitude of location",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "404": {
            "description": "No Events found",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "No Events found"
            }
          }
        }
      }
    },
    "/get/thumbnail": {
      "get": {
        "summary": "Get Thumbnail",
        "description": "Get Thumbnail for Cover Image in various Sizes. Image is always PNG encoded. Cover must have been uploaded first: use /add/cover! Maximum Side Length for Small: 320px, Medium: 480px, Large: 640px. Error 500 if Url is invalid or no Image",
        "parameters": [
          {
            "name": "Size",
            "in": "query",
            "type": "string",
            "description": "Thumbnail Size (Small, Medium, Large)",
            "required": true
          },
          {
            "name": "Url",
            "in": "query",
            "type": "string",
            "description": "Url tu original File",
            "required": true 
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "403": {
            "description": "Invalid Size",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Invalid Size"
            }
          },
          "404": {
            "description": "Cover Not Found",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Cover Not Found"
            }
          },
          "500":{
            "description": "Invalid Image",
            "schema":{
              "title": "Status",
              "type": "string",
              "default": "Invalid Image"
            }  
           }
        } 
      } 
    },


    "/register": {
      "post": {
        "summary": "Register",
        "description": "Register new User or new Device. Returns UID and current Token of User. Can be used to recover token by registering with same credentials again.",
        "parameters": [
          {
            "name": "RegistrationData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Registration_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Registration_Answer"
            }
          },
          "400": {
            "description": "Incorrect Data Format",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Incorrect Data Format"
            }
          },
          "403": {
            "description": "Invalid Userdata",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Invalid Userdata"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "summary": "Login",
        "description": "Login user with his User Id. Necessary if no session exists. If the given uid is correct, a session is created, even if the token is expired. If the token is expired you need to perform the /get/token operation to update it. Then login again.",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "type": "string",
            "description": "User Id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "OK"
            }
          },
          "403": {
            "description": "Token Expired",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Token expired"
            }
          },
          "404": {
            "description": "Uid not Found",
            "schema": {
              "title": "Status",
              "type": "string",
              "default": "Uid not found"
            }
          }
        }
      }
    },
    "/get/token": {
      "get": {
        "summary": "Get new Token",
        "description": "Get a new Token, if the current is expired (check this by using the /login operation). Save the new token and use it for all API Calls. WARNING: For security reasons this operation will always return a token. Only if the given uid and old token is correct, the returned token is valid.",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "type": "string",
            "description": "User Id",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "description": "Last Token (invalid)",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token (not necessarily valid)",
            "schema": {
              "title": "Token",
              "type": "string"
            }
          }
        }
      }
    },
    "/add/event": {
      "post": {
        "summary": "Add Event",
        "description": "Add new Event if not already Existing. Add Cover and Locatoin first!",
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "descripton": "Event Crated",
            "schema": {
              "title": "OK",
              "type": "boolean",
              "default": "true"
            }
          },
          "403": {
            "description": "Event Not Created",
            "schema": {
              "title": "OK",
              "type": "boolean",
              "default": "false"
            }
          }
        }
      }
    },
    "/add/location": {
      "post": {
        "summary": "Add Location",
        "description": "Add Event Location if not existing",
        "parameters": [

          {
            "name": "Location",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "descripton": "Location Crated",
            "schema": {
                "$ref": "#/definitions/Location"
            }
          },
          "403": {
            "description": "Location Not Created",
                "schema": {
                "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/add/cover": {
      "post": {
        "summary": "Add Cover",
        "description": "Add Cover Image if not existing",
        "parameters": [
          {
            "name": "Cover",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Cover"
            }
          }
        ],
        "responses": {
          "200": {
            "descripton": "Cover Crated",
            "schema": {
              "title": "OK",
              "type": "boolean",
              "default": "true"
            }
          },
          "403": {
            "description": "Cover Not Created",
            "schema": {
              "title": "OK",
              "type": "boolean",
              "default": "false"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "type": "object",
      "required": [
        "Name",
        "Description",
        "EventTypeId",
        "Price",
        "StartDateTime",
        "EndDateTime",
        "Priority",
        "cover",
        "location"
      ],
      "properties": {
         "Id": {
          "type": "string",
          "description": "Event Id"
        },
        "Name": {
          "type": "string",
          "description": "Event Name"
        },
        "Priority": {
          "type": "number",
          "format": "integer",
          "description": "Priority"
        },
        "Description": {
          "type": "string"
        },
        "Price": {
          "type": "number",
          "format": "double",
          "description": "Event Description"
        },
        "StartDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start Date and Time of Event"
        },
        "EndDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End Date and Time of Event"
        },
        "distance": {
          "type": "number",
          "format": "double"
        },
        "cover": {
          "$ref": "#/definitions/Cover"
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      }
    },
    "Events": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Event"
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "Latitude",
        "Longitude"
      ],
      "properties": {
        "Id": {
          "type": "number",
          "format": "integer"
        },
        "Latitude": {
          "type": "number",
          "format": "float"
        },
        "Longitude": {
          "type": "number",
          "format": "float"
        },
        "City": {
          "type": "string"
        },
        "Street": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        }

      }
    },
    "Cover": {
      "type": "object",
      "required": [
        "Url"
      ],
      "properties": {
        "Url": {
          "type": "string"
        },
        "ThumbnailLarge": {
          "type": "binary",
          "format": "binary"
        },
        "ThumbnailMedium": {
          "type": "binary",
          "format": "binary"
        },
        "ThumbnailSmall": {
          "type": "binary",
          "format": "binary"
        }
      }
    },
    "Registration_Answer": {
      "type": "object",
      "required": [
        "UrventUserData_Guid",
        "UrventUserData_AccessToken"
      ],
      "properties": {
        "UrventUserData_Guid": {
          "type": "string"
        },
        "UrventUserData_AccessToken": {
          "type": "string"
        }
      }
    },
    "Registration_Request": {
      "type": "object",
      "required": [
        "EMail",
        "Gender_Id",
        "Birthday"
      ],
      "properties": {
        "EMail": {
          "type": "string"
        },
        "Gender_Id": {
          "type": "number",
          "format": "integer"
        },
        "Birthday": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Image": {
      "type": "file",
      "format": "PNG",
      "default": "PNG Image" 
      }  
  }
}
